#pragma once

#include <string>

/*
문제:
4개의 기호 ‘(’, ‘)’, ‘[’, ‘]’를 이용해서 만들어지는 괄호열 중에서 올바른 괄호열이란
다음과 같이 정의된다.

한 쌍의 괄호로만 이루어진 ‘()’와 ‘[]’는 올바른 괄호열이다.
만일 X가 올바른 괄호열이면 ‘(X)’이나 ‘[X]’도 모두 올바른 괄호열이 된다.
X와 Y 모두 올바른 괄호열이라면 이들을 결합한 XY도 올바른 괄호열이 된다.
예를 들어 ‘(()[[]])’나 ‘(())[][]’ 는 올바른 괄호열이지만 ‘([)]’ 나 ‘(()()[]’ 은 모두
올바른 괄호열이 아니다. 우리는 어떤 올바른 괄호열 X에 대하여 그 괄호열의 값(괄호값)을 아래와
같이 정의하고 값(X)로 표시한다.

‘()’ 인 괄호열의 값은 2이다.
‘[]’ 인 괄호열의 값은 3이다.
‘(X)’ 의 괄호값은 2×값(X) 으로 계산된다.
‘[X]’ 의 괄호값은 3×값(X) 으로 계산된다.
올바른 괄호열 X와 Y가 결합된 XY의 괄호값은 값(XY)= 값(X)+값(Y) 로 계산된다.
예를 들어 ‘(()[[]])([])’ 의 괄호값을 구해보자.  ‘()[[]]’ 의 괄호값이 2 + 3×3=11 이므로
‘(()[[ ]])’의 괄호값은 2×11=22 이다. 그리고  ‘([])’의 값은 2×3=6 이므로 전체 괄호열의
값은 22 + 6 = 28 이다.

여러분이 풀어야 할 문제는 주어진 괄호열을 읽고 그 괄호값을 앞에서 정의한대로 계산하여 출력하는 것이다.

입력:
첫째 줄에 괄호열을 나타내는 문자열(스트링)이 주어진다. 단 그 길이는 1 이상, 30 이하이다

출력:
첫째 줄에 그 괄호열의 값을 나타내는 정수를 출력한다. 만일 입력이 올바르지 못한 괄호열이면 반드시
0을 출력해야 한다.

예제 입력 1:
(()[[]])([])

예제 출력 1:
28

나의 방법:
 1) 치환으로 풀자
 -> 재귀동작을 해야하기 떄문에 메모리도 너무 많이 사용하고,
 -> 시간도 매우 많이 걸린다.

 2) 메모리, 시간을 줄이자.
 -> 기존에 주어진 스택을 활용하여, 새로운 스택을 만들지 않는
	기존 스택을 변경하면서 풀어나간다.
	이 방법은 재귀동작도 기하급수적으로 줄고, 추가적인 스택도 사용하지 않는다.

스터디 풀이 방법들:
1. 문자열 검색을 이후 치환하며 풀어간다. (오래걸림 + 정답 따로 스택에 저장)
2. 분할정복 방법 (재귀호출.. 스택 쌓임..)
*/

using INPUT = std::string;
using OUTPUT = int;
using SOLUTION = OUTPUT(*)(INPUT);

OUTPUT solution2504_1(INPUT);
OUTPUT solution2504_2(INPUT);
OUTPUT solution2504_3(INPUT);
